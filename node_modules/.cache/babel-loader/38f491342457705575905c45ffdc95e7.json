{"ast":null,"code":"var _jsxFileName = \"/Users/benson/NASA-Mars-Rover/marsFrontGroup/src/components/RenderImg.js\";\nimport React from \"react\";\nimport \"../style/Render.css\";\nimport { RiHeartLine, RiHeartFill } from \"react-icons/ri\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RenderImg(_ref) {\n  let {\n    addFave,\n    removeFave,\n    imgs,\n    faveIdToImage\n  } = _ref;\n  console.log(faveIdToImage); // const [heart, setHeart] = useState(new Map());\n  // useEffect(() => {\n  //   const initialIds = new Map();\n  //   imgs.forEach((element) => {\n  //     initialIds.set(element.id, false);\n  //   });\n  //   setHeart(initialIds);\n  // }, [imgs]);\n  // console.log(\":31 heart\", heart);\n\n  /**\n   * function that renders heart icon\n   * @returns heart icon in conditional rendering\n   */\n\n  function renderHeart(_pic) {\n    return /*#__PURE__*/_jsxDEV(\"a\", {\n      className: \"hearbtn\",\n      onClick: () => {\n        faveIdToImage.get(_pic.id) ? removeFave(_pic) : addFave(_pic);\n      },\n      children: faveIdToImage.get(_pic.id) ? /*#__PURE__*/_jsxDEV(RiHeartFill, {\n        className: \"heart\",\n        size: 30,\n        style: {\n          color: \"red\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(RiHeartLine, {\n        className: \"heart\",\n        size: 30,\n        style: {\n          color: \"red\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this);\n  }\n  /**\n   * function that displays the returned images in horizontal pairs\n   * @param {*} size, shows the images in a row of size(in this case 2)\n   * @param {*} array (the array returned from imgs, from the NASA API key)\n   * @returns\n   */\n\n\n  function display(size, array) {\n    let pairs = [];\n    let i = 0;\n\n    while (i < array.length) {\n      pairs.push(array.slice(i, i += size));\n    }\n\n    return pairs;\n  }\n\n  let imagePairs = display(2, imgs);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"imgRender\",\n      children: imagePairs.map((rover, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-group \",\n        id: \"cardGroup\",\n        children: rover.map(roverpic => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card container\",\n          id: \"cardimage\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"card-title\",\n              children: [\" Rover: \", roverpic.rover.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"imgs\",\n              src: roverpic.img_src,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"card-text\",\n              children: [\"Sol: \", roverpic.sol, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 21\n              }, this), \"Earth Date: \", roverpic.earth_date, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 21\n              }, this), \"Landing Date:\", roverpic.rover.landing_date, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 21\n              }, this), \"Status: \", roverpic.rover.status]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cardlink\",\n              children: renderHeart(roverpic)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 17\n          }, this)\n        }, roverpic.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this))\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_c = RenderImg;\nRenderImg.propTypes = {\n  faveIdToImage: PropTypes.any.isRequired,\n  removeFave: PropTypes.any.isRequired,\n  addFave: PropTypes.any.isRequired,\n  imgs: PropTypes.array.isRequired\n};\nexport default RenderImg;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderImg\");","map":{"version":3,"sources":["/Users/benson/NASA-Mars-Rover/marsFrontGroup/src/components/RenderImg.js"],"names":["React","RiHeartLine","RiHeartFill","PropTypes","RenderImg","addFave","removeFave","imgs","faveIdToImage","console","log","renderHeart","_pic","get","id","color","display","size","array","pairs","i","length","push","slice","imagePairs","map","rover","idx","roverpic","name","img_src","sol","earth_date","landing_date","status","propTypes","any","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,qBAAP;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,gBAAzC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAEA,SAASC,SAAT,OAAgE;AAAA,MAA7C;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,UAAX;AAAuBC,IAAAA,IAAvB;AAA6BC,IAAAA;AAA7B,GAA6C;AAC9DC,EAAAA,OAAO,CAACC,GAAR,CAAYF,aAAZ,EAD8D,CAE9D;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACF;AACA;AACA;;AACG,WAASG,WAAT,CAAqBC,IAArB,EAA2B;AAC1B,wBACE;AACE,MAAA,SAAS,EAAC,SADZ;AAEE,MAAA,OAAO,EAAE,MAAM;AACbJ,QAAAA,aAAa,CAACK,GAAd,CAAkBD,IAAI,CAACE,EAAvB,IAA4BR,UAAU,CAACM,IAAD,CAAtC,GAA6CP,OAAO,CAACO,IAAD,CAApD;AAED,OALH;AAAA,gBAOGJ,aAAa,CAACK,GAAd,CAAkBD,IAAI,CAACE,EAAvB,iBACC,QAAC,WAAD;AAAa,QAAA,SAAS,EAAC,OAAvB;AAA+B,QAAA,IAAI,EAAE,EAArC;AAAyC,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT;AAAhD;AAAA;AAAA;AAAA;AAAA,cADD,gBAGC,QAAC,WAAD;AAAa,QAAA,SAAS,EAAC,OAAvB;AAA+B,QAAA,IAAI,EAAE,EAArC;AAAyC,QAAA,KAAK,EAAE;AAAEA,UAAAA,KAAK,EAAE;AAAT;AAAhD;AAAA;AAAA;AAAA;AAAA;AAVJ;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,WAASC,OAAT,CAAiBC,IAAjB,EAAuBC,KAAvB,EAA8B;AAC5B,QAAIC,KAAK,GAAG,EAAZ;AACA,QAAIC,CAAC,GAAG,CAAR;;AACA,WAAOA,CAAC,GAAGF,KAAK,CAACG,MAAjB,EAAyB;AACvBF,MAAAA,KAAK,CAACG,IAAN,CAAWJ,KAAK,CAACK,KAAN,CAAYH,CAAZ,EAAgBA,CAAC,IAAIH,IAArB,CAAX;AACD;;AACD,WAAOE,KAAP;AACD;;AACD,MAAIK,UAAU,GAAGR,OAAO,CAAC,CAAD,EAAIT,IAAJ,CAAxB;AAEA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,gBACGiB,UAAU,CAACC,GAAX,CAAe,CAACC,KAAD,EAAQC,GAAR,kBACd;AAAK,QAAA,SAAS,EAAC,aAAf;AAA6B,QAAA,EAAE,EAAC,WAAhC;AAAA,kBACGD,KAAK,CAACD,GAAN,CAAWG,QAAD,iBACT;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAgC,UAAA,EAAE,EAAC,WAAnC;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA,oCACE;AAAI,cAAA,SAAS,EAAC,YAAd;AAAA,qCAAoCA,QAAQ,CAACF,KAAT,CAAeG,IAAnD;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAK,cAAA,SAAS,EAAC,MAAf;AAAsB,cAAA,GAAG,EAAED,QAAQ,CAACE,OAApC;AAA6C,cAAA,GAAG,EAAC;AAAjD;AAAA;AAAA;AAAA;AAAA,oBAFF,eAGE;AAAG,cAAA,SAAS,EAAC,WAAb;AAAA,kCACQF,QAAQ,CAACG,GADjB,eAEE;AAAA;AAAA;AAAA;AAAA,sBAFF,kBAGeH,QAAQ,CAACI,UAHxB,eAIE;AAAA;AAAA;AAAA;AAAA,sBAJF,mBAKgBJ,QAAQ,CAACF,KAAT,CAAeO,YAL/B,eAME;AAAA;AAAA;AAAA;AAAA,sBANF,cAOWL,QAAQ,CAACF,KAAT,CAAeQ,MAP1B;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,eAYE;AAAK,cAAA,SAAS,EAAC,UAAf;AAAA,wBAA2BvB,WAAW,CAACiB,QAAD;AAAtC;AAAA;AAAA;AAAA;AAAA,oBAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,WAAoDA,QAAQ,CAACd,EAA7D;AAAA;AAAA;AAAA;AAAA,gBADD;AADH,SAAiDa,GAAjD;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD;;KAhFQvB,S;AAkFTA,SAAS,CAAC+B,SAAV,GAAsB;AAEpB3B,EAAAA,aAAa,EAAEL,SAAS,CAACiC,GAAV,CAAcC,UAFT;AAGpB/B,EAAAA,UAAU,EAAEH,SAAS,CAACiC,GAAV,CAAcC,UAHN;AAIpBhC,EAAAA,OAAO,EAAEF,SAAS,CAACiC,GAAV,CAAcC,UAJH;AAKpB9B,EAAAA,IAAI,EAAEJ,SAAS,CAACe,KAAV,CAAgBmB;AALF,CAAtB;AAOA,eAAejC,SAAf","sourcesContent":["import React from \"react\";\nimport \"../style/Render.css\";\nimport { RiHeartLine, RiHeartFill } from \"react-icons/ri\";\nimport PropTypes from \"prop-types\";\n\nfunction RenderImg({ addFave, removeFave, imgs ,faveIdToImage}) {\n  console.log(faveIdToImage)\n  // const [heart, setHeart] = useState(new Map());\n\n  // useEffect(() => {\n  //   const initialIds = new Map();\n  //   imgs.forEach((element) => {\n  //     initialIds.set(element.id, false);\n  //   });\n\n  //   setHeart(initialIds);\n  // }, [imgs]);\n  // console.log(\":31 heart\", heart);\n\n  /**\n   * function that renders heart icon\n   * @returns heart icon in conditional rendering\n   */\n   function renderHeart(_pic) {\n    return (\n      <a\n        className=\"hearbtn\"\n        onClick={() => {\n          faveIdToImage.get(_pic.id)? removeFave(_pic):addFave(_pic);\n          \n        }}\n      >\n        {faveIdToImage.get(_pic.id) ? (\n          <RiHeartFill className=\"heart\" size={30} style={{ color: \"red\" }} />\n        ) : (\n          <RiHeartLine className=\"heart\" size={30} style={{ color: \"red\" }} />\n        )}\n      </a>\n    );\n  }\n\n  /**\n   * function that displays the returned images in horizontal pairs\n   * @param {*} size, shows the images in a row of size(in this case 2)\n   * @param {*} array (the array returned from imgs, from the NASA API key)\n   * @returns\n   */\n  function display(size, array) {\n    let pairs = [];\n    let i = 0;\n    while (i < array.length) {\n      pairs.push(array.slice(i, (i += size)));\n    }\n    return pairs;\n  }\n  let imagePairs = display(2, imgs);\n\n  return (\n    <div>\n      <div className=\"imgRender\">\n        {imagePairs.map((rover, idx) => (\n          <div className=\"card-group \" id=\"cardGroup\" key={idx}>\n            {rover.map((roverpic) => (\n              <div className=\"card container\" id=\"cardimage\" key={roverpic.id}>\n                <div className=\"card-body\">\n                  <h5 className=\"card-title\"> Rover: {roverpic.rover.name}</h5>\n                  <img className=\"imgs\" src={roverpic.img_src} alt=\"\" />\n                  <p className=\"card-text\">\n                    Sol: {roverpic.sol}\n                    <br />\n                    Earth Date: {roverpic.earth_date}\n                    <br />\n                    Landing Date:{roverpic.rover.landing_date}\n                    <br />\n                    Status: {roverpic.rover.status}\n                  </p>\n                  <div className=\"cardlink\">{renderHeart(roverpic)}</div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nRenderImg.propTypes = {\n\n  faveIdToImage: PropTypes.any.isRequired,\n  removeFave: PropTypes.any.isRequired,\n  addFave: PropTypes.any.isRequired,\n  imgs: PropTypes.array.isRequired,\n};\nexport default RenderImg;\n"]},"metadata":{},"sourceType":"module"}